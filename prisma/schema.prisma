// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String
  password String
  is_admin Boolean @default(false)
  salt     String  @default("")
}

model Member {
  id       Int             @id @default(autoincrement())
  name     String
  info     String?
  imageUrl String?
  contacts Contact[]
  periods  PeriodMember[]
  project  ProjectMember[]
  news         News[] 
  mediums      MediumMember[]
}

model Contact {
  id      Int      @id @default(autoincrement())
  owner   Member   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId Int
  type    ContactType
  url     String
}

enum ContactType {
  GITHUB
  LINKEDIN
  MEDIUM
  EMAIL
}

model Period {
  id         Int            @id @default(autoincrement())
  generation Float
  members    PeriodMember[]
  projects   Project[]
}

model PeriodMember {
  role     PeriodRoleType
  member   Member         @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memberId Int
  period   Period         @relation(fields: [periodId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  periodId Int

  @@id([memberId, periodId])
}

enum PeriodRoleType {
  PRESIDENT
  VICE_PRESIDENT
  MEDIA_LEAD
  MANAGER
  MEMBER
  MENTOR
}

model Project {
  id       Int             @id @default(autoincrement())
  period   Period          @relation(fields: [periodId], references: [id], onDelete: Cascade)
  periodId Int
  name     String
  url     ProjectUrl[]
  summary  String
  imageUrl String
  members  ProjectMember[]
}

model ProjectMember {
  role      ProjectRoleType
  member    Member          @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memberId  Int
  project   Project         @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId Int

  @@id([memberId, projectId])
}

enum ProjectRoleType {
  TEAM_LEADER
  TEAM_MEMBER
}

model ProjectUrl {
  id        Int     @id @default(autoincrement())
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  type      ProjectUrlType
  url       String
}

enum ProjectUrlType {
  MEDIUM
  YOUTUBE
}

model News {
  id        Int       @id @default(autoincrement())
  title     String
  member    Member    @relation(fields: [memberId], references: [id])       // fields used to generate Prisma Client
  memberId  Int                                                             // foreign key in database
  datetime  DateTime  @default(now())
  summary   String
  link      String
  imageUrl  String
  isDisclosed Boolean
}

model DeferenceImage {
  id                Int               @id @default(autoincrement())
  type              String
  imageUrl         String
  deference         Deference         @relation(fields: [deferenceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  deferenceId       Int
}

model Deference {
  id             Int              @id @default(autoincrement())
  year           Int
  deferenceImage DeferenceImage[]
}

model Medium {
  id           Int            @id @default(autoincrement())
  title        String
  authors      MediumMember[]
  url          String
  imageUrl     String
  summary      String
  tags         MediumTag[]
}

model MediumTag {
  medium   Medium @relation(fields: [mediumId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediumId Int
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId    Int

  @@id([mediumId, tagId])
}

model Tag {
  id      Int         @id @default(autoincrement())
  name    String
  mediums MediumTag[]
}

model MediumMember {
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memberId Int
  medium   Medium @relation(fields: [mediumId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediumId Int

  @@id([memberId, mediumId])
}

