# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserResponse {
  id: Float!
  email: String!
  name: String!
  is_admin: Boolean!
  token: String!
}

type NewsResponse {
  id: Int!
  title: String!
  member: MemberResponse!
  datetime: DateTime!
  summary: String!
  link: String!
  imageUrl: String!
  isDisclosed: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ProjectMemberResponse {
  id: Int!
  member: MemberResponse!
  project: ProjectResponse!
  role: ProjectRoleType!
}

enum ProjectRoleType {
  TEAM_LEADER
  TEAM_MEMBER
}

type ProjectResponse {
  id: Int!
  period: PeriodResponse!
  name: String!
  url: [ProjectUrlResponse!]!
  summary: String!
  imageUrl: String!
  members: [ProjectMemberResponse!]!
}

type ProjectUrlResponse {
  type: ProjectUrlType!
  url: String!
}

enum ProjectUrlType {
  MEDIUM
  YOUTUBE
  WEBSITE
}

type PeriodResponse {
  id: Int
  generation: Float
  members: [PeriodMemberResponse!]
  projects: [ProjectResponse!]
}

type PeriodMemberResponse {
  id: Int!
  role: PeriodRoleType!
  member: MemberResponse!
  period: PeriodResponse!
}

enum PeriodRoleType {
  PRESIDENT
  VICE_PRESIDENT
  MEDIA_LEAD
  MANAGER
  MEMBER
  MENTOR
}

type ContactResponse {
  id: Int!
  ownerId: Int
  type: ContactType
  url: String
}

enum ContactType {
  GITHUB
  LINKEDIN
  MEDIUM
  EMAIL
  WEBSITE
  BLOG
  BRUNCH
  FACEBOOK
}

type MemberResponse {
  id: Int!
  name: String!
  info: String!
  imageUrl: String!
  news: [NewsResponse!]
  contacts: [ContactResponse!]
  periods: [PeriodMemberResponse!]
}

type MediumMemberResponse {
  member: MemberResponse!
  medium: MediumResponse!
}

type TagResponse {
  id: Int!
  name: String!
  mediums: [MediumTagResponse!]!
}

type MediumTagResponse {
  id: Int!
  tag: TagResponse!
  medium: MediumResponse!
}

type MediumResponse {
  id: Int!
  title: String!
  url: String!
  imageUrl: String!
  summary: String!
  authors: [MediumMemberResponse!]!
  tags: [MediumTagResponse!]!
}

type CountResponse {
  count: Int!
}

type DeferencePartnerLogoUrlResponse {
  id: Int!
  name: String!
  imageUrl: String!
}

type DeferenceReferenceResponse {
  id: Int!
  type: String!
  link: String!
}

type DeferenceSpeakerResponse {
  id: Int!
  name: String!
  imageUrl: String!
  info: String!
}

type DeferenceResponse {
  id: Int!
  year: Int!
  summary: String!
  startTime: DateTime!
  endTime: DateTime!
  participationMethod: String!
  contents: String!
  audience: String!
  host: String!
  formLink: String!
  mainPosterUrlDesktop: String!
  mainPosterUrlMobile: String!
  schedulePosterUrlDesktop: String!
  schedulePosterUrlMobile: String!
  deferenceSpeaker: [DeferenceSpeakerResponse!]
  deferenceReference: [DeferenceReferenceResponse!]
  deferencePartnerLogoUrl: [DeferencePartnerLogoUrlResponse!]
}

type Query {
  signinUser(data: UserSigninInput!): UserResponse!
  findUsers(data: UsersFindInput!): [UserResponse!]
  findUser(data: UserFindInput!): UserResponse
  member(memberUniqueInput: MemberUniqueInput!): MemberResponse!
  members(memberFindManyInput: MemberFindManyInput!): [MemberResponse!]!
  periodMembers(periodFindInput: PeriodFindInput!): [PeriodMemberResponse!]!
  period(periodFindInput: PeriodFindInput!): PeriodResponse!
  periods(periodFindInput: PeriodFindInput!): [PeriodResponse!]!
  project(projectUniqueInput: ProjectUniqueInput!): ProjectResponse!
  projects(projectFindManyInput: ProjectFindManyInput!): [ProjectResponse!]!
  getNewsById(id: Float!): NewsResponse
  countTotalNews: CountResponse!
  getAllNews(FindManyNewsInput: FindManyNewsInput!): [NewsResponse!]!
  getDeferenceById(id: Float!): DeferenceResponse
  getDeferences: [DeferenceResponse!]!
  medium(mediumUniqueInput: MediumUniqueInput!): MediumResponse!
  mediums(mediumFindManyInput: MediumFindManyInput!): [MediumResponse!]!
  tags: [TagResponse!]!
  countTotalMedium(mediumCountInput: MediumCountInput!): CountResponse!
}

input UserSigninInput {
  email: String!
  password: String!
}

input UsersFindInput {
  orderBy: String
}

input UserFindInput {
  id: Float!
}

input MemberUniqueInput {
  id: Int!
}

input MemberFindManyInput {
  orderBy: String
  periodId: Int
}

input PeriodFindInput {
  id: Int
}

input ProjectUniqueInput {
  id: Int!
}

input ProjectFindManyInput {
  orderBy: String
}

input FindManyNewsInput {
  offset: Int
  page: Int
}

input MediumUniqueInput {
  id: Int!
}

input MediumFindManyInput {
  tagId: Int
  offset: Int
  page: Int
}

input MediumCountInput {
  tagId: Int
}

type Mutation {
  signupUser(data: UserSignupInput!): UserResponse!
  createMember(memberInput: MemberInput!): MemberResponse!
  updateMember(memberUpdateInput: MemberUpdateInput!): MemberResponse!
  deleteMember(memberUniqueInput: MemberUniqueInput!): MemberResponse!
  createPeriod(periodInput: PeriodInput!): PeriodResponse!
  createPeriodMember(periodMemberCreateInput: PeriodMemberInput!): PeriodMemberResponse!
  updatePeriodMember(periodMemberUpdateInput: PeriodMemberInput!): PeriodMemberResponse!
  deletePeriodMember(periodMemberUniqueInput: PeriodMemberUniqueInput!): PeriodMemberResponse!
  createProject(projectInput: ProjectInput!): ProjectResponse!
  updateProject(projectUpdateInput: ProjectUpdateInput!): ProjectResponse!
  deleteProject(projectUniqueInput: ProjectUniqueInput!): ProjectResponse!
  createNews(createNewsInput: CreateNewsInput!): NewsResponse!
  updateNews(updateNewsInput: UpdateNewsInput!): NewsResponse!
  deleteNews(id: Float!): NewsResponse!
  createDeference(createDeferenceInput: CreateDeferenceInput!): DeferenceResponse!
  updateDeference(updateDeferenceInput: UpdateDeferenceInput!): DeferenceResponse!
  deleteDeference(id: Float!): DeferenceResponse!
  createTag(tagCreateInput: TagCreateInput!): TagResponse!
  deleteTag(tagUniqueInput: TagUniqueInput!): TagResponse!
  createMedium(mediumCreateInput: MediumInput!): MediumResponse!
  updateMedium(mediumUpdateInput: MediumUpdateInput!): MediumResponse!
  deleteMedium(mediumUniqueInput: MediumUniqueInput!): MediumResponse!
}

input UserSignupInput {
  email: String!
  name: String!
  password: String!
}

input MemberInput {
  name: String!
  info: String!
  imageUrl: String!
  contacts: [ContactInput!]
  periods: [PeriodMemberInput!]
}

input ContactInput {
  type: ContactType!
  url: String!
}

input PeriodMemberInput {
  role: PeriodRoleType!
  memberId: Int
  periodId: Int
}

input MemberUpdateInput {
  id: Int!
  data: MemberInput!
}

input PeriodInput {
  generation: Float!
}

input PeriodMemberUniqueInput {
  memberId: Int!
  periodId: Int!
}

input ProjectInput {
  name: String!
  periodId: Int!
  url: [ProjectUrlInput!]!
  summary: String!
  imageUrl: String!
  members: [ProjectMemberInput!]!
}

input ProjectUrlInput {
  type: ProjectUrlType!
  url: String!
}

input ProjectMemberInput {
  role: ProjectRoleType!
  memberId: Int!
}

input ProjectUpdateInput {
  id: Int!
  data: ProjectInput
}

input CreateNewsInput {
  title: String!
  memberId: Int!
  summary: String!
  link: String!
  imageUrl: String!
  isDisclosed: Boolean!
}

input UpdateNewsInput {
  id: Int!
  title: String!
  memberId: Int!
  summary: String!
  link: String!
  imageUrl: String!
  isDisclosed: Boolean!
}

input CreateDeferenceInput {
  year: Int!
  summary: String!
  startTime: DateTime!
  endTime: DateTime!
  participationMethod: String!
  contents: String!
  audience: String!
  host: String!
  formLink: String!
  mainPosterUrlDesktop: String!
  mainPosterUrlMobile: String!
  schedulePosterUrlDesktop: String!
  schedulePosterUrlMobile: String!
  deferenceSpeaker: [CreateDeferenceSpeakerInput!]
  deferenceReference: [CreateDeferenceReferenceInput!]
  deferencePartnerLogoUrl: [CreateDeferencePartnerLogoUrlInput!]
}

input CreateDeferenceSpeakerInput {
  name: String!
  imageUrl: String!
  info: String!
}

input CreateDeferenceReferenceInput {
  type: String!
  link: String!
}

input CreateDeferencePartnerLogoUrlInput {
  name: String!
  imageUrl: String!
}

input UpdateDeferenceInput {
  id: Int!
  year: Int!
  summary: String!
  startTime: DateTime!
  endTime: DateTime!
  participationMethod: String!
  contents: String!
  audience: String!
  host: String!
  formLink: String!
  mainPosterUrlDesktop: String!
  mainPosterUrlMobile: String!
  schedulePosterUrlDesktop: String!
  schedulePosterUrlMobile: String!
  deferenceSpeaker: UpdateDeferenceSpeakerInput
  deferenceReference: UpdateDeferenceReferenceInput
  deferencePartnerLogoUrl: UpdateDeferencePartnerLogoUrlInput
}

input UpdateDeferenceSpeakerInput {
  id: Int!
  name: String!
  imageUrl: String!
  info: String!
}

input UpdateDeferenceReferenceInput {
  id: Int!
  type: String!
  link: String!
}

input UpdateDeferencePartnerLogoUrlInput {
  id: Int!
  name: String!
  imageUrl: String!
}

input TagCreateInput {
  name: String!
}

input TagUniqueInput {
  id: Int!
}

input MediumInput {
  title: String!
  url: String!
  imageUrl: String!
  summary: String!
  memberIds: [Int!]!
  tagIds: [Int!]!
}

input MediumUpdateInput {
  id: Int!
  data: MediumInput!
}
